import random
from django.db.models import Q
from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import render, get_object_or_404
from django.views import View
from django.views.generic import TemplateView, ListView, DetailView

from .models import Restaurant

def restaurang_list_view(request):

    querySet = Restaurant.objects.all()

    template_name = 'restaurants/restaurant_view.html'
    context = {'obj_list': {'title': 'Restaurant List', 'restaurants': querySet}}
    return render(request, template_name=template_name, context=context)

def restaurant_detail_view(request, slug):
    template_name = 'restaurants/restaurant_detail.html'
    obj = Restaurant.objects.get(slug=slug)               #gives not found error if slug does not match
    # obj = get_object_or_404(Restaurant, slug=slug)          #gives page not found if slug does not match and then shows the error generated by the query below
    context = {
        'object': obj
    }
    return render(request, template_name, context)

class RestaurantListView(ListView):
    def get_queryset(self):
        slug = self.kwargs.get('slug')
        if slug:
            queryset = Restaurant.objects.filter(
                Q(category_iexact=slug) |
                Q(category_icontains=slug)
            )
        else:
            queryset = Restaurant.objects.all()
        return queryset
    # queryset = Restaurant.objects.all()

class RestaurantDetailView(DetailView):
    # import pdb;pdb.set_trace();
    # detail view does 404 by default if instance is not found
    queryset = Restaurant.objects.all()
    # def get_context_data(self, *args, **kwargs):
    #     # queries field_name = value - where field_name = url_param_name and value = value
    #     print(self.kwargs)
    #     context = super(RestaurantDetailView, self).get_context_data(*args, **kwargs)   # getting the super's get_context_data
    #     print(context)  # print the supers context
    #     return context  # have to return to complete overriding


# ------------------ Creating view to handle forms -------------------#
#         Chapter 24. Saving Data the Hard + Wrong Way

def restaurant_create_view(request):

    if request.method == 'POST':
        print("Post Data")
        print(request.POST)
        title = request.POST.get("title")
        location = request.POST.get("location")
        category = request.POST.get("category")
        obj = Restaurant.objects.create(
            name=title,
            location=location,
            category=category
        )
        return HttpResponseRedirect("/restaurants/")
    if request.method == 'GET':
        print("Get Data")
        print(request.GET)
    template_name = 'restaurants/form.html'
    context = {}
    return render(request, template_name, context)

# ------------------ Creating view to handle forms -------------------#