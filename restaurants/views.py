import random
from django.db.models import Q
from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import render, get_object_or_404
from django.views import View
from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin
from django.views.generic import TemplateView, ListView, DetailView, CreateView
from .forms import RestaurantCreateForm, RestaurantCreateModelForm

from .models import Restaurant

def restaurang_list_view(request):

    querySet = Restaurant.objects.all()

    template_name = 'restaurants/restaurant_view.html'
    context = {'obj_list': {'title': 'Restaurant List', 'restaurants': querySet}}
    return render(request, template_name=template_name, context=context)

def restaurant_detail_view(request, slug):
    template_name = 'restaurants/restaurant_detail.html'
    obj = Restaurant.objects.get(slug=slug)               #gives not found error if slug does not match
    # obj = get_object_or_404(Restaurant, slug=slug)          #gives page not found if slug does not match and then shows the error generated by the query below
    context = {
        'object': obj
    }
    return render(request, template_name, context)

class RestaurantListView(ListView):
    def get_queryset(self):
        slug = self.kwargs.get('slug')
        if slug:
            queryset = Restaurant.objects.filter(
                Q(category_iexact=slug) |
                Q(category_icontains=slug)
            )
        else:
            queryset = Restaurant.objects.all()
        return queryset

class RestaurantDetailView(DetailView):
    queryset = Restaurant.objects.all()


# ------------------ Creating view to handle forms -------------------#
#         Chapter 24. Saving Data the Hard + Wrong Way

def restaurant_create_view(request):
    form = RestaurantCreateForm(request.POST or None)
    errors = None
    if request.method == 'POST':
        print("Post Data")
        print(request.POST)
        # title = request.POST.get("title")
        # location = request.POST.get("location")
        # category = request.POST.get("category")
        # form = RestaurantCreateForm(request.POST)
        if form.is_valid():
            obj = Restaurant.objects.create(
                name=form.cleaned_data.get('name'),
                location=form.cleaned_data.get('location'),
                category=form.cleaned_data.get('category')
            )
            return HttpResponseRedirect("/restaurants/")
        if form.errors:
            errors = form.errors
            print (form.errors)

    if request.method == 'GET':
        print("Get Data")
        print(request.GET)
    template_name = 'restaurants/form.html'
    context = {"form": form, "errors": errors}
    return render(request, template_name, context)
#         Chapter 24. Saving Data the Hard + Wrong Way

#         Chapter 25. The Extra Power of Django Model Forms

@login_required()
def restaurant_create_modal_view(request):
    form = RestaurantCreateModelForm(request.POST or None)
    errors = None
    if form.is_valid():
        if request.user.is_authenticated():
            restaurant = form.save(commit=False)
            restaurant.owner = request.user
            restaurant.save()
            # form.save()
            return HttpResponseRedirect("/restaurants/")
        else:
            return HttpResponseRedirect("/login/")
    if form.errors:
        errors = form.errors
        print (form.errors)
    template_name = 'restaurants/form.html'
    context = {"form": form, "errors": errors}
    return render(request, template_name, context)

class RestaurantCreateView(LoginRequiredMixin, CreateView):
    login_url = '/login/'
    form_class = RestaurantCreateModelForm
    template_name = 'restaurants/form.html'
    # success_url = '/restaurants/'
#         Chapter 25. The Extra Power of Django Model Forms

    def form_valid(self, form):
        restaurant = form.save(commit=False)

        restaurant.owner = self.request.user
        #         when not logged in the self.request.user gives the class AnonymousUser not the User that we want
        # restaurant.save()
        return super(RestaurantCreateView, self).form_valid(form)

# ------------------ Creating view to handle forms -------------------#